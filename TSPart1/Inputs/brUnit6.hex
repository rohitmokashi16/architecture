00000000: 201e0400	#        addi r30, r0, stack   ; use r30 as stack pointer
00000004: 23dd0000	#        addi r29, r30, 0      ; use r29 as frame pointer
00000008: 2001008c	#        addi r1, r0, op
0000000c: 8c210000	#        lw r1, 0(r1)
00000010: 20020090	#        addi r2, r0, s1
00000014: 44400003	#        trap r2, 3    
00000018: 44200001	#        trap r1, 1
0000001c: 200200a4	#        addi r2, r0, s2
00000020: 44400003	#        trap r2, 3
00000024: afc1fffc	#        sw -4(r30), r1
00000028: 23defff4	#        addi r30, r30, -12     ; make room for the param, ret addr, frame ptr
0000002c: 20020044	#        addi r2, r0, fact      ; put address in register r2
00000030: 4c400000	#        jalr r2
00000034: 44200001	#        trap r1, 1            ; print out r1
00000038: 200200a9	#        addi r2, r0, nl
0000003c: 44400003	#        trap r2, 3
00000040: 44000000	#        trap r0, 0            ; halt
00000044: afdf0004	#fact:   sw 4(r30), r31        ; save return address
00000048: afdd0000	#        sw 0(r30), r29        ; store frame pointer
0000004c: 23dd0000	#        addi r29, r30, 0      ; adjust frame pointer
00000050: 8fa10008	#        lw r1, 8(r29)         ; get op
00000054: 2022ffff	#        addi r2, r1, -1       ; see if param is 1
00000058: 10400020	#        beqz r2, done
0000005c: afc2fffc	#        sw -4(r30), r2        ; put it onto stack
00000060: 23defff4	#        addi r30, r30, -12    ; make room for the param, ret addr, frame ptr
00000064: 0fffffdc	#        jal fact              ; return result in r1
00000068: 8fa20008	#        lw r2, 8(r29)         ; retrieve param again
0000006c: 00200835	#        movi2fp f1, r1        ; copy bits to fp register
00000070: 00401035	#        movi2fp f2, r2        ; copy bits to fp register
00000074: 0441080e	#        mult f1, f2, f1       ; integer multiplication
00000078: 00200834	#        movfp2i r1, f1        ; copy bits to int register
0000007c: 23be0000	#done:   addi r30, r29, 0      ; set esp back to ebp
00000080: 8fdd0000	#        lw r29, 0(r30)        ; get old ebp 
00000084: 8fdf0004	#        lw r31, 4(r30)        ; get ret addr
00000088: 4be00000	#        jr r31
0000008c: 00000007    	# 7
00000090: 0a54686520666163746f7269616c206f662000	#"\nThe factorial of "
000000a4: 2069732000	#" is "
000000a9: 0a00	#"\n"
00000400: 00000000	#stack:  
